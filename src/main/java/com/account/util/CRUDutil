package simple.util;

import java.lang.reflect.Field;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;

/**
 * 手 撸一个 通用的 增删改查的 工具类或者一个可以说是一个 简单的框架
 * 
 * 
 */
public class CRUDUtil {

	private static ConnectionPool pool = null;
	static {
		pool = ConnectionPool.instance();
	}
	
private static<T> int add(String sql,Object []param){
		Connection conn = null;
		PreparedStatement pst = null;
		ResultSet rs = null;
		Dbutil db=new Dbutil();
		conn=db.getCon();
        try {
            pst= conn.prepareStatement(sql);
            for(int i=0;i<param.length;i++){
            pst.setObject(i+1,param[i]);}
            return pst.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        //pst
		return 0;


	}

	private static  int delete(String sql,Object[] param){
		Connection conn = null;
		PreparedStatement pst = null;
		ResultSet rs = null;
		Dbutil db=new Dbutil();
		try {
			conn=db.getCon();
			pst=conn.prepareStatement(sql);
			for(int i=0;i<param.length;i++){
			pst.setObject(i+1,param[i]);
			}
			return pst.executeUpdate();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return 0;
	}

	/**
	 * 万能的 update方法
	 * 
	 * @param sql
	 * @param params
	 * @return
	 * @throws SQLException
	 */
	public static int update(String sql, Object[] params) throws SQLException {
		Connection conn = null;
		PreparedStatement pst = null;
		try {
			conn = pool.getConnection();
			pst = conn.prepareStatement(sql);
			if (params != null) {
				for (int i = 0; i < params.length; i++) {

					pst.setObject(i + 1, params[i]);
				}
			}
			return pst.executeUpdate();
		} finally {
			release(null, pst, conn);// 释放资源
		}
	}

	/**
	 * 使用反射和元素数据实现的一个 通用的 查询出一个符合 要求的对象
	 * 
	 * @param sql
	 * @param params
	 * @return
	 * @throws Exception
	 */
	public static <T> T selectOneModel(String sql, Object[] params, Class<T> clazz) throws Exception {
		T o = clazz.newInstance();
		Connection conn = null;
		PreparedStatement pst = null;
		ResultSet rs = null;
		try {
			conn = pool.getConnection();
			pst = conn.prepareStatement(sql);
			if (params != null) {
				for (int i = 0; i < params.length; i++) {
					pst.setObject(i + 1, params[i]);
				}
			}
			rs = pst.executeQuery();
			if (!rs.next()) {
				return null;
			}
			ResultSetMetaData rd = rs.getMetaData();// 获取元数据
			int columnCount = rd.getColumnCount();
			for (int i = 0; i < columnCount; i++) {
				// String fieldName = rd.getColumnName(i + 1);// 获取列的名称
				String fieldName = rd.getColumnLabel(i + 1);// 获取sql as后的值
				Object filedValue = rs.getObject(i + 1);
				Field f = clazz.getDeclaredField(fieldName);
				f.setAccessible(true);// 解决 private 域不可见的问题
				f.set(o, filedValue);
			}
			return o;
		} finally {
			release(rs, pst, conn);
		}
	}

	private static void release(ResultSet rs, PreparedStatement pst, Connection conn) {
		if (rs != null) {
			try {
				rs.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		if (pst != null) {
			try {
				pst.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		if (conn != null) {
			try {
				conn.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
}
